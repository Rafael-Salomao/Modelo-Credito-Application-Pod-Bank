{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["zHq17KwE39aS","k1nK3I-lLJhp","nte2Iah8LL2N","i5zweTcf4hPo"],"mount_file_id":"1yLDbdxg5UAT3NNaM_sqfhunYQR4RlAAe","authorship_tag":"ABX9TyNxIO5rfkDrBCdDz0zfuWru"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Feature Engeneering - Bureau Balance**"],"metadata":{"id":"9YtGE19fcoH-"}},{"cell_type":"markdown","source":["## **Lendo dados com Spark**"],"metadata":{"id":"41sVrbm8ckbu"}},{"cell_type":"markdown","source":["### **Importar Bibliotecas**"],"metadata":{"id":"zGRTprnaORbW"}},{"cell_type":"code","source":["!pip install boto3\n","!pip install s3fs\n","!pip install Pyspark"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4E7qn6r1HC-h","executionInfo":{"status":"ok","timestamp":1701365334146,"user_tz":180,"elapsed":81568,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"2575abba-38fb-447e-9589-8990fbe170f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting boto3\n","  Downloading boto3-1.33.4-py3-none-any.whl (139 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.3/139.3 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting botocore<1.34.0,>=1.33.4 (from boto3)\n","  Downloading botocore-1.33.4-py3-none-any.whl (11.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.8/11.8 MB\u001b[0m \u001b[31m57.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting jmespath<2.0.0,>=0.7.1 (from boto3)\n","  Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Collecting s3transfer<0.9.0,>=0.8.2 (from boto3)\n","  Downloading s3transfer-0.8.2-py3-none-any.whl (82 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.0/82.0 kB\u001b[0m \u001b[31m9.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.10/dist-packages (from botocore<1.34.0,>=1.33.4->boto3) (2.8.2)\n","Requirement already satisfied: urllib3<2.1,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.34.0,>=1.33.4->boto3) (2.0.7)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.34.0,>=1.33.4->boto3) (1.16.0)\n","Installing collected packages: jmespath, botocore, s3transfer, boto3\n","Successfully installed boto3-1.33.4 botocore-1.33.4 jmespath-1.0.1 s3transfer-0.8.2\n","Collecting s3fs\n","  Downloading s3fs-2023.10.0-py3-none-any.whl (28 kB)\n","Collecting aiobotocore~=2.7.0 (from s3fs)\n","  Downloading aiobotocore-2.7.0-py3-none-any.whl (73 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.5/73.5 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting fsspec==2023.10.0 (from s3fs)\n","  Downloading fsspec-2023.10.0-py3-none-any.whl (166 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m166.4/166.4 kB\u001b[0m \u001b[31m11.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.10/dist-packages (from s3fs) (3.8.6)\n","Collecting botocore<1.31.65,>=1.31.16 (from aiobotocore~=2.7.0->s3fs)\n","  Downloading botocore-1.31.64-py3-none-any.whl (11.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.3/11.3 MB\u001b[0m \u001b[31m62.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: wrapt<2.0.0,>=1.10.10 in /usr/local/lib/python3.10/dist-packages (from aiobotocore~=2.7.0->s3fs) (1.14.1)\n","Collecting aioitertools<1.0.0,>=0.5.1 (from aiobotocore~=2.7.0->s3fs)\n","  Downloading aioitertools-0.11.0-py3-none-any.whl (23 kB)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (23.1.0)\n","Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (3.3.2)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (6.0.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (4.0.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (1.9.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (1.4.0)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (1.3.1)\n","Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from botocore<1.31.65,>=1.31.16->aiobotocore~=2.7.0->s3fs) (1.0.1)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.10/dist-packages (from botocore<1.31.65,>=1.31.16->aiobotocore~=2.7.0->s3fs) (2.8.2)\n","Requirement already satisfied: urllib3<2.1,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.31.65,>=1.31.16->aiobotocore~=2.7.0->s3fs) (2.0.7)\n","Requirement already satisfied: idna>=2.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.0->aiohttp!=4.0.0a0,!=4.0.0a1->s3fs) (3.4)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.31.65,>=1.31.16->aiobotocore~=2.7.0->s3fs) (1.16.0)\n","Installing collected packages: fsspec, aioitertools, botocore, aiobotocore, s3fs\n","  Attempting uninstall: fsspec\n","    Found existing installation: fsspec 2023.6.0\n","    Uninstalling fsspec-2023.6.0:\n","      Successfully uninstalled fsspec-2023.6.0\n","  Attempting uninstall: botocore\n","    Found existing installation: botocore 1.33.4\n","    Uninstalling botocore-1.33.4:\n","      Successfully uninstalled botocore-1.33.4\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","boto3 1.33.4 requires botocore<1.34.0,>=1.33.4, but you have botocore 1.31.64 which is incompatible.\n","gcsfs 2023.6.0 requires fsspec==2023.6.0, but you have fsspec 2023.10.0 which is incompatible.\n","s3transfer 0.8.2 requires botocore<2.0a.0,>=1.33.2, but you have botocore 1.31.64 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed aiobotocore-2.7.0 aioitertools-0.11.0 botocore-1.31.64 fsspec-2023.10.0 s3fs-2023.10.0\n","Collecting Pyspark\n","  Downloading pyspark-3.5.0.tar.gz (316.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.9/316.9 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from Pyspark) (0.10.9.7)\n","Building wheels for collected packages: Pyspark\n","  Building wheel for Pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for Pyspark: filename=pyspark-3.5.0-py2.py3-none-any.whl size=317425344 sha256=955c8ce07d5d762c5567acf15e9f9fd088dd6f47d458f298d0fb7fcc752b9d6a\n","  Stored in directory: /root/.cache/pip/wheels/41/4e/10/c2cf2467f71c678cfc8a6b9ac9241e5e44a01940da8fbb17fc\n","Successfully built Pyspark\n","Installing collected packages: Pyspark\n","Successfully installed Pyspark-3.5.0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import boto3\n","from pyspark.sql import SparkSession\n","from pyspark.sql.functions import col, when, round"],"metadata":{"id":"RuKyO60_PImA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["spark = SparkSession.builder.appName('Feature Engineering').getOrCreate()\n","spark"],"metadata":{"id":"j90YDwouH3Wb","executionInfo":{"status":"ok","timestamp":1701365351868,"user_tz":180,"elapsed":16863,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"colab":{"base_uri":"https://localhost:8080/","height":222},"outputId":"d47d597d-6985-4c5e-d890-5c4dd8bb4627"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pyspark.sql.session.SparkSession at 0x7e4d96a3c820>"],"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://4fa1a6b02972:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.5.0</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Feature Engineering</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# S3_DATA_SOURCE_PATH = 's3://pod-academy-analise-de-credito-para-fintech/dados/bureau_balance.csv'\n","# S3_DATA_OUTPUT_PATH = 's3://pod-academy-analise-de-credito-para-fintech/feature-engineering/01-Bureau/ábt_bureau_balance.parquet'\n","\n","# # S3 credentials\n","# AWS_ACCESS_KEY_ID = 'AKIAYTYOYG7SCH7IJSEG'\n","# AWS_SECRET_ACCESS_KEY = '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'\n","\n","# # Create a SparkSession\n","# print(\"Creating SparkSession...\")\n","# spark = SparkSession.builder.appName('GenerateAndProcessData') \\\n","#     .config('spark.hadoop.fs.s3a.access.key', AWS_ACCESS_KEY_ID) \\\n","#     .config('spark.hadoop.fs.s3a.secret.key', AWS_SECRET_ACCESS_KEY) \\\n","#     .getOrCreate()"],"metadata":{"id":"p9wKLTF-vZDS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Importar tabela 'bureau_balance'.**"],"metadata":{"id":"q9xCoVedNxrz"}},{"cell_type":"code","source":["# Caminho para ler o arquivo CSV localmente no Colab\n","path = \"/content/bureau_balance.csv\"\n","\n","# Ler o arquivo de descrição das colunas\n","bureau_balance_00 = spark.read.csv(path, header=True)\n","\n","# Mostrar número de linhas\n","bureau_balance_00.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eYyF33iCIDT0","executionInfo":{"status":"ok","timestamp":1701365520990,"user_tz":180,"elapsed":10329,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"128bb399-c757-4d37-e1e4-d62d9ecd0dd7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["381526"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["bureau_balance_00.show(truncate=False)"],"metadata":{"id":"141ifPRb3BNR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701365521403,"user_tz":180,"elapsed":417,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"426565c3-b77a-482d-8a85-1c758e326a27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------------+--------------+------+\n","|SK_ID_BUREAU|MONTHS_BALANCE|STATUS|\n","+------------+--------------+------+\n","|5715448     |0             |C     |\n","|5715448     |-1            |C     |\n","|5715448     |-2            |C     |\n","|5715448     |-3            |C     |\n","|5715448     |-4            |C     |\n","|5715448     |-5            |C     |\n","|5715448     |-6            |C     |\n","|5715448     |-7            |C     |\n","|5715448     |-8            |C     |\n","|5715448     |-9            |0     |\n","|5715448     |-10           |0     |\n","|5715448     |-11           |X     |\n","|5715448     |-12           |X     |\n","|5715448     |-13           |X     |\n","|5715448     |-14           |0     |\n","|5715448     |-15           |0     |\n","|5715448     |-16           |0     |\n","|5715448     |-17           |0     |\n","|5715448     |-18           |0     |\n","|5715448     |-19           |0     |\n","+------------+--------------+------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["bureau_balance_00.printSchema()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ViRq6JApHPKt","executionInfo":{"status":"ok","timestamp":1701365521403,"user_tz":180,"elapsed":5,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"4d30951a-aa6e-49fa-927c-6a02af3c2ebe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- SK_ID_BUREAU: string (nullable = true)\n"," |-- MONTHS_BALANCE: string (nullable = true)\n"," |-- STATUS: string (nullable = true)\n","\n"]}]},{"cell_type":"markdown","source":["# **Criação de variáveis preditivas**"],"metadata":{"id":"vFnpQmX9OmXR"}},{"cell_type":"markdown","source":["## **bureau_balance**"],"metadata":{"id":"h-m1G-_DX39y"}},{"cell_type":"markdown","source":["Primeiro iremos criar variáveis preditivas na tabela \"bureau_balance\" para acrescentar essas variáveis na tabela \"bureau\".\n","\n","Após essa união das duas tabelas, iremos realizar a criação de variáveis preditivas na tabela \"bureau\"."],"metadata":{"id":"SNj-JhrtOrO9"}},{"cell_type":"code","source":["# Definir funções de agregações desejadas\n","agg = ['SUM', 'MAX', 'MIN', 'AVG']\n","\n","var_categoricas = ['STATUS']\n","var_numericas = ['MONTHS_BALANCE']\n","\n","# Definir flags de meses\n","meses_flag = ['ultimos_3_meses_flag', 'ultimos_6_meses_flag', 'ultimos_9_meses_flag', 'ultimos_12_meses_flag']"],"metadata":{"id":"lGW0T3gKbTIT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bureau_balance_00.createOrReplaceTempView('bureau_balance_00')"],"metadata":{"id":"DAx2f7s0W12z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Criando flags de janela para histórico:**\n","\n","- últimos 3 meses\n","\n","- últimos 6 meses\n","\n","- últimos 12 meses"],"metadata":{"id":"dMa5RZcO4Ppj"}},{"cell_type":"code","source":["bureau_balance_01 = spark.sql(\"\"\"\n","SELECT\n","    *,\n","    CASE\n","        WHEN MONTHS_BALANCE BETWEEN MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) - 3 AND MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) THEN 1\n","        ELSE 0\n","    END AS ultimos_3_meses_flag,\n","    CASE\n","        WHEN MONTHS_BALANCE BETWEEN MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) - 6 AND MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) THEN 1\n","        ELSE 0\n","    END AS ultimos_6_meses_flag,\n","    CASE\n","        WHEN MONTHS_BALANCE BETWEEN MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) - 6 AND MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) THEN 1\n","        ELSE 0\n","    END AS ultimos_9_meses_flag,\n","    CASE\n","        WHEN MONTHS_BALANCE BETWEEN MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) - 12 AND MAX(MONTHS_BALANCE) OVER (PARTITION BY `SK_ID_BUREAU`) THEN 1\n","        ELSE 0\n","    END AS ultimos_12_meses_flag\n","FROM bureau_balance_00\n","ORDER BY `SK_ID_BUREAU`, MONTHS_BALANCE;\n","\"\"\")\n","\n","bureau_balance_01.createOrReplaceTempView(\"bureau_balance_01\")\n","bureau_balance_01.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"acBlde73OAWL","executionInfo":{"status":"ok","timestamp":1701365589329,"user_tz":180,"elapsed":1447,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"d848969a-d28d-4b7c-a7f0-7585a404ec2e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["381526"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["bureau_balance_01.show()"],"metadata":{"id":"M0EQDvoWPKMS","executionInfo":{"status":"ok","timestamp":1701365600472,"user_tz":180,"elapsed":9296,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"18fafd1d-45a2-48f7-e389-80d7c6c98c66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------------+--------------+------+--------------------+--------------------+--------------------+---------------------+\n","|SK_ID_BUREAU|MONTHS_BALANCE|STATUS|ultimos_3_meses_flag|ultimos_6_meses_flag|ultimos_9_meses_flag|ultimos_12_meses_flag|\n","+------------+--------------+------+--------------------+--------------------+--------------------+---------------------+\n","|     5001726|            -1|     C|                   1|                   1|                   1|                    1|\n","|     5001726|           -10|     C|                   0|                   0|                   0|                    1|\n","|     5001726|           -11|     C|                   0|                   0|                   0|                    1|\n","|     5001726|           -12|     C|                   0|                   0|                   0|                    1|\n","|     5001726|           -13|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -14|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -15|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -16|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -17|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -18|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -19|     C|                   0|                   0|                   0|                    0|\n","|     5001726|            -2|     C|                   1|                   1|                   1|                    1|\n","|     5001726|           -20|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -21|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -22|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -23|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -24|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -25|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -26|     C|                   0|                   0|                   0|                    0|\n","|     5001726|           -27|     C|                   0|                   0|                   0|                    0|\n","+------------+--------------+------+--------------------+--------------------+--------------------+---------------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"markdown","source":["## **Criando variáveis explicativas de primeira camada**\n","\n","- usar média, mínimo, soma, máximo\n","- considerar variáveis categóricas e variáveis numéricas"],"metadata":{"id":"nKV5KHUz3p2X"}},{"cell_type":"markdown","source":["### **Gerar variáveis.**"],"metadata":{"id":"tXDxHnwWGKix"}},{"cell_type":"code","source":["# Importar SparkSession\n","from pyspark.sql import SparkSession\n","\n","# Criar uma sessão do Spark\n","spark = SparkSession.builder.appName(\"AdaptacaoCodigo\").getOrCreate()\n","\n","df_original_spark = bureau_balance_01\n","\n","# Inicializar o contador\n","contador_resultados = 0\n","\n","# Criar lista para armazenar os resultados\n","resultados = []\n","\n","for ag in agg:\n","    for var_cat in var_categoricas:\n","        # Filtrar valores distintos não nulos\n","        distinct_values = df_original_spark.select(var_cat).distinct().na.drop(subset=[var_cat]).rdd.flatMap(lambda x: x).collect()\n","\n","        for dom_cat_value in distinct_values:\n","            for var_numerica in var_numericas:\n","                resultado = f\"ROUND({ag}(CASE WHEN {var_cat} = '{dom_cat_value}' THEN {var_numerica} ELSE NULL END), 2) as {ag.lower()}_{var_numerica.lower()[:5]}_{var_cat.lower()[:4]}_{dom_cat_value.lower()[:3].replace(' ', '_')},\"\n","\n","                # Adicionar o resultado à lista\n","                resultados.append(resultado)\n","\n","                for mes_flag in meses_flag:\n","                    resultado = f\"ROUND({ag}(CASE WHEN {var_cat} = '{dom_cat_value}' AND {mes_flag} = 1 THEN {var_numerica} ELSE NULL END), 2) as {ag.lower()}_U{mes_flag.split('_')[1]}M_{var_numerica.lower()[:5]}_{var_cat.lower()[:4]}_{dom_cat_value.lower()[:3].replace(' ', '_')},\"\n","\n","                    # Adicionar o resultado à lista\n","                    resultados.append(resultado)\n","\n","                    # Incrementar o contador\n","                    contador_resultados += 1\n","\n","# Printar o total de combinações\n","print(f\"Total de combinações: {contador_resultados}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9wweewOQFy6","executionInfo":{"status":"ok","timestamp":1701366115320,"user_tz":180,"elapsed":5147,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"4d64e274-dacb-4fd3-e326-15ca9ab6878d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total de combinações: 128\n"]}]},{"cell_type":"code","source":["# Inicializa a lista para armazenar os resultados\n","resultados_formatados = []\n","\n","# Se há pelo menos um resultado na lista\n","if resultados:\n","    # Remove a vírgula do último item\n","    resultados[-1] = resultados[-1].rstrip(',')\n","\n","    # Adiciona os resultados formatados à lista\n","    resultados_formatados.extend(resultados)\n","\n","    # Une a lista em uma string usando uma quebra de linha como separador\n","    resultados_str = '\\n'.join(resultados_formatados)\n","    # print(resultados_str)\n","else:\n","    resultados_str = \"A lista de resultados está vazia.\""],"metadata":{"id":"ng517xj5QKnI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Colar variáveis criadas no código PySpark-SQL.**"],"metadata":{"id":"g5x7pPaKGUW6"}},{"cell_type":"code","source":["bureau_balance_02 = spark.sql(f'''\n","SELECT\n","  SK_ID_BUREAU as SK_ID_BUREAU_bureau_balance,\n","  {resultados_str}\n","FROM\n","  bureau_balance_01\n","GROUP BY\n","  SK_ID_BUREAU\n","''')\n","\n","bureau_balance_02.createOrReplaceTempView(\"bureau_balance_02\")\n","bureau_balance_02.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-06XnHKiQM9I","executionInfo":{"status":"ok","timestamp":1701366151281,"user_tz":180,"elapsed":6140,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"ae3f90a8-afc6-455e-e410-d1e94176babe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["11659"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["print(len(bureau_balance_02.columns))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W6flPiLHQNqy","executionInfo":{"status":"ok","timestamp":1701366151281,"user_tz":180,"elapsed":18,"user":{"displayName":"Rafael Salomao","userId":"07380706284005681115"}},"outputId":"1c4e005c-e944-4c30-8feb-f55e0776532b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["161\n"]}]},{"cell_type":"markdown","source":["## **Criando variáveis explicativas de segunda camada**\n","\n","- Razão entre variáveis históricas"],"metadata":{"id":"zHq17KwE39aS"}},{"cell_type":"code","source":["# ID = 'SK_ID_BUREAU_bureau_balance'\n","\n","# # Obter o esquema do DataFrame\n","# schema = bureau_balance_02.schema\n","\n","# # Extrair nomes das colunas excluindo \"SK_ID_BUREAU_b\"\n","# colunas_originais = [col.name for col in schema if col.name != ID]\n","\n","# # Imprimir a lista de nomes das colunas\n","# print(colunas_originais)"],"metadata":{"id":"m6GbVxVE19Z8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Gerar variáveis.**"],"metadata":{"id":"k1nK3I-lLJhp"}},{"cell_type":"code","source":["# # Inicializar o contador\n","# contador_resultados = 0\n","\n","# # Criar lista para armazenar os resultados\n","# resultados = []\n","\n","# # Criar novas colunas relacionadas\n","# for i in range(len(colunas_originais)):\n","#     for j in range(i+1, len(colunas_originais)):\n","#         coluna_i = colunas_originais[i]\n","#         coluna_j = colunas_originais[j]\n","#         nova_coluna_nome = f\"{coluna_i.split('_')[0]}_{coluna_j.split('_')[0]}_{coluna_i[4:]}_{coluna_j.split('_')[-1]}\"\n","#         resultado = f\"CASE WHEN {coluna_j} = 0 THEN NULL ELSE ROUND({coluna_i} / {coluna_j}, 2) END AS {nova_coluna_nome},\"\n","\n","#         # Adicionar o resultado à lista\n","#         resultados.append(resultado)\n","\n","#         # Incrementar o contador\n","#         contador_resultados += 1\n","\n","# # Printar o total de combinações\n","# print(f\"Total de combinações: {contador_resultados}\")"],"metadata":{"id":"djDbaSCqE5Dk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Inicializa a lista para armazenar os resultados\n","# resultados_formatados = []\n","\n","# # Se há pelo menos um resultado na lista\n","# if resultados:\n","#     # Remove a vírgula do último item\n","#     resultados[-1] = resultados[-1].rstrip(',')\n","\n","#     # Adiciona os resultados formatados à lista\n","#     resultados_formatados.extend(resultados)\n","\n","#     # Une a lista em uma string usando uma quebra de linha como separador\n","#     resultados_str = '\\n'.join(resultados_formatados)\n","#     # print(resultados_str)\n","# else:\n","#     resultados_str = \"A lista de resultados está vazia.\""],"metadata":{"id":"fbBaARXUQbJy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Colar variáveis criadas no código PySpark-SQL.**"],"metadata":{"id":"nte2Iah8LL2N"}},{"cell_type":"code","source":["# bureau_balance_03 = spark.sql(f'''\n","# SELECT\n","#   *,\n","#   {resultados_str}\n","# FROM\n","#   bureau_balance_02\n","# ''')\n","\n","# bureau_balance_03.createOrReplaceTempView(\"bureau_balance_03\")\n","# bureau_balance_03.count()"],"metadata":{"id":"-qZiweYRxXD4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# bureau_balance_03.show()"],"metadata":{"id":"axtBZQg1LWHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(len(bureau_balance_03.columns))"],"metadata":{"id":"s2CZkz29vaDU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Trazer as variáveis explicativas para a base de público**"],"metadata":{"id":"i5zweTcf4hPo"}},{"cell_type":"code","source":["# abt_bureau_balance = spark.sql(\"\"\"\n","#     Select\n","#         pub.*,\n","#         b.*,\n","#         date_format(CURRENT_DATE, 'yyyyMM') as PK_DATREF,\n","#         CURRENT_DATE as PK_DAT_PROC\n","#     from\n","#         bureau_00 as pub\n","#     left join\n","#         bureau_balance_03 as b\n","#     on\n","#         pub.SK_ID_BUREAU = b.`SK_ID_BUREAU_bureau_balance`\n","\n","# \"\"\")\n","\n","# abt_bureau_balance.count()"],"metadata":{"id":"oTYMcPcC4gXB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# bureau_00.count()"],"metadata":{"id":"TrZ36lmRPrUN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# abt_bureau_balance.show()"],"metadata":{"id":"UrTLOUVHMcEs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Salvando tabela no diretório do Drive e S3.**"],"metadata":{"id":"cp38TL7DP1Qz"}},{"cell_type":"code","source":["abt_bureau_balance = bureau_balance_02"],"metadata":{"id":"LKi6w-hOQ38A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save to parquet\n","abt_bureau_balance.write.mode(\"overwrite\").parquet(\"/content/abt_bureau_balance.parquet\")"],"metadata":{"id":"O0PUQwzqjdsJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip list --format=freeze > '/content/requirements.txt'"],"metadata":{"id":"njMZLCGAj9so"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Crie uma sessão do Spark\n","# spark = SparkSession.builder.appName(\"LeituraParquet\").getOrCreate()\n","\n","# # Caminho para o arquivo Parquet\n","# caminho_arquivo_parquet = \"/content/abt_bureau_balance.parquet\"\n","\n","# # Leia o arquivo Parquet\n","# dados_parquet = spark.read.parquet(caminho_arquivo_parquet)\n","\n","# # Mostre o esquema do DataFrame\n","# dados_parquet.printSchema()\n","\n","# # Mostre algumas linhas do DataFrame\n","# dados_parquet.show()"],"metadata":{"id":"TY-Mi0QqVzm3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZyvCxsvEixsU"},"execution_count":null,"outputs":[]}]}